{
    "docs": [
        {
            "location": "/", 
            "text": "Ethenet-Ethenet Direct Connection\n\n\n\n\n\n\nFirst configure your desktop client to any  IP address except 192.168.1.150 as this address is assigned to your connected VIBE by default. ( we are using 192.168.1.151 for our PC client)\n\n\n\n\n\n\nConnect VIBE to the PC client via ethernet port.\n\n\n\n\n\n\nSetup ppp0 connection. You can refer the same document under\n\nSetting PPP connections\n\n\n\n\n\n\n\n\n\n\nThen you have to assign gateway IP address of your PC client as 192.168.1.150 for direct communication between client and VIBE.\n\n\n\n\nFor this you have to type\n\n\n # nano /etc/network/interfaces\n\n\n\n\n\n\n\nA text editor will get open and then you have to configure the settings as per your requirements.( gateway IP address must be  by default. ( we are using 192.168.1.151 for our PC client)\n\n\n # wpa-ssid \"essid\"\n # wpa-psk  \"password\"\n\n case, to completely disable remove file [run_boot-scripts] from the b$\n iface usb0 inet static# Ethernet/RNDIS gadget (g_ether)\n # ... or on host side, usbnet and random hwaddr\n # Note on some boards, usb0 is automatically setup with an init script\n # in that# This file describes the network interfaces available on your system\n # and how to activate them. For more information, see interfaces(5).\n\n # The loopback network interface\n auto lo\n iface lo inet loopback\n\n # The primary network interface\n auto eth0\n # iface eth0 inet dhcp\n # Example to keep MAC address between reboots\n # hwaddress ether DE:AD:BE:EF:CA:FE\n iface eth0 inet static\n address 192.168.1.151\n netmask 255.255.255.0\n network 192.168.1.0\n gateway 192.168.1.150\n\n\n\n\n\n\n\nNow for confirmation, ping 192.168.1.150 using your PC client as well as ping 192.168.1.151( PC client) using VIBE.\n\n\n\n\nLog into VIBE via ethernet port using your PC client as root client.\n\n\n\n\nSetting PPP connections\n\n\n\n\n\n\nPlace a data enabled mini-SIM in the SIM card slot and connect a GSM antenna to the respective 2G/3G antenna connector.\n\n\n\n\n\n\nEnsure that the power jumpers J2 and J3(ignore if battery feature present) on VIBE are in place and eeprom address set at 0x54 using dip switch S7.\n\n\n\n\n\n\nPower up VIBE using the 5V,5A DC adapter(supplied with VIBE).\n\n\n\n\n\n\nAfter powering up and bootup, ssh into VIBE through Ethernet Cable (at IP 192.168.1.150 for preflashed eMMC images)\n\n\n   # ssh -l root 192.168.1.150\n\n\n\n\n\n\n\nUsername for root login is root and password is root. For user login, username is debian and password is temppwd.\n\n\n\n\n\n\nThen you have to check modem using lsusb command.\n\n\n\n\n\n\nNote:\n Please ensure that the user leds on the board is glowing according to its functionality after booting/powering the board.\n\n\n        root@Yantrr:~# lsusb\n\n        Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp.\n        Bus 002 Device 002: ID 21f5:2012\n        Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n        Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n\n\n\n\n\nNow there are two ways to setup ppp0 connections.\n\n\n\n\na) ppp daemon\n\n\n\n\n\n\nFor setting it , you have to open /etc/ppp/peers/airtel file ( we used airtel SIM).\n\n\n     # nano /etc/ppp/peers/airtel\n\n\n\n\n\n\n\nFrom the opened window, you can verify the username for your service provider.\n\n\n  # This option file was generated by pppconfig 2.3.18.\n  #\n  #\n  hide-password\n  noauth\n  connect \"/usr/sbin/chat -v -f /etc/chatscripts/airtel\"\n  debug\n  /dev/ttyUSB3\n  460800\n  #defaultroute\n  replacedefaultroute\n  noipdefault\n  user \"airtel\"\n  remotename airtel\n\n\n\n\n\n\n\nNow you can use pon command.\n\n\n  #  pon airtel\n\n\n\n\n\n\n\nYou can check whether ppp0 connection is up or not.\n\n\n\n\n\n\nroot@Yantrr:~# ifconfig\n\n\n      eth0      Link encap:Ethernet  HWaddr 6c:ec:eb:64:98:ce\n                inet addr:192.168.1.150  Bcast:192.168.1.255  Mask:255.255.255.0\n                inet6 addr: fe80::6eec:ebff:fe64:98ce/64 Scope:Link\n                UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n                RX packets:20930 errors:0 dropped:2409 overruns:0 frame:0\n                TX packets:4791 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:1000\n                RX bytes:4089157 (3.8 MiB)  TX bytes:533725 (521.2 KiB)\n                Interrupt:40\n\n      lo        Link encap:Local Loopback\n                inet addr:127.0.0.1  Mask:255.0.0.0\n                inet6 addr: ::1/128 Scope:Host\n                UP LOOPBACK RUNNING  MTU:65536  Metric:1\n                RX packets:160 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:160 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:0\n                RX bytes:14652 (14.3 KiB)  TX bytes:14652 (14.3 KiB)\n\n      ppp0      Link encap:Point-to-Point Protocol\n                inet addr:100.105.62.223  P-t-P:10.64.64.64  Mask:255.255.255.255\n                UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1\n                RX packets:7 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:17 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:3\n                RX bytes:130 (130.0 B)  TX bytes:937 (937.0 B)\n\n\n\nb) Wvdial\n\n\n\n\nFirst we will setup ppp0 connections using wvdial.\n\n\n\n\nFor this you have to install wvdial tool using command\n\n\n  # sudo apt -get install wvdial\n\n\n\n\n\n\n\nNow we have to set the configuration of wvdial using wvdial.conf file. For this type\n\n\n  # nano /etc/wvdial.conf\n\n\n\n\n\n\n\nAssuming that you have the USERNAME, PASSWORD and APN available for the service provider of the SIM card being used, edit and make wvdial.conf file like this. Sample Wvdial files for some service providers are given \nHERE\n\n\n\n\n\n\nNOTE:\n Also verify the modem port mentioned in the wvdial.conf file with actual modem port.\n\n\nFor ZTE model- /dev/ttyUSB3\n\n\nFor SEW Strong Rising model- /dev/ttyUSB0\n\n\n     [Dialer Defaults]\n     Modem Type = Analog\n     ModemPhone = *99#\n     ISDN = 0\n     Baud = 115200\n     Username = USERNAME\n     Password = PASSWORD\n     Modem = /dev/ttyUSB0\n     Init1 = ATZ\n     Init2 = ATQ0 V1 E1 S0=0 \nC1 \nD2 +FCLASS=0\n     Init3 = at+cgdcont=1,\"ip\",\"APN\"\n     Stupid Mode = 1\n\n\n\nNote:\n Consult your network provider for exact details in case you are facing any difficulties.\n\n\nNow save and exit the wvdial.conf file.\n\n\nNext we have to establish wvdial connection. (In this example we have taken airtel-3G micro-SIM card)\n\n\n      wvdial Airtel_3G\n\n\n\nNOTE:\n Here you may get some errors like\n\n\n    warning, can't find address for `www.suse.de`\n\n   --\n warning, address lookup does not work\n   --\n Nameserver (DNS) failure, the connection may not work.\n\n\n\n\n\n\n\nFor this you have to edit your wvdial.conf file correctly by verifying the details with the service provider of your SIM card. You $\n\n\n\n\n\n\nIn the following file /etc/ppp/peers/wvdial, comment or remove usepeerdns\n\n\n   # nano /etc/ppp/peers/wvdial\n\n   noauth\n   name wvdial\n   #usepeerdns\n\n\n\n\n\n\n\nAnd in /etc/wvdial.conf ,  add following two lines in the column of your internet service provider:\n\n\n      # nano /etc/wvdial.conf\n\n      check DNS = no\n      auto DNS = no\n\n\n\n\n\nNow we will check whether connection is established or not.\n\n\n\n\nroot@Yantrr:~# ifconfig\n\n\n      eth0      Link encap:Ethernet  HWaddr 6c:ec:eb:64:98:ce\n                inet addr:192.168.1.150  Bcast:192.168.1.255  Mask:255.255.255.0\n                inet6 addr: fe80::6eec:ebff:fe64:98ce/64 Scope:Link\n                UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n                RX packets:20930 errors:0 dropped:2409 overruns:0 frame:0\n                TX packets:4791 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:1000\n                RX bytes:4089157 (3.8 MiB)  TX bytes:533725 (521.2 KiB)\n                Interrupt:40\n\n      lo        Link encap:Local Loopback\n                inet addr:127.0.0.1  Mask:255.0.0.0\n                inet6 addr: ::1/128 Scope:Host\n                UP LOOPBACK RUNNING  MTU:65536  Metric:1\n                RX packets:160 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:160 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:0\n                RX bytes:14652 (14.3 KiB)  TX bytes:14652 (14.3 KiB)\n\n      ppp0      Link encap:Point-to-Point Protocol\n                inet addr:100.105.62.223  P-t-P:10.64.64.64  Mask:255.255.255.255\n                UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1\n                RX packets:7 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:17 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:3\n                RX bytes:130 (130.0 B)  TX bytes:937 (937.0 B)\n\n\n\n\n\nHere we can see three protocols\n\n\n\n\n1) Ethernet (eth0)\n2) Loopback (lo)\n3) Point-to-Point protocol (ppp0)\n\n\n\n\n\n\nYou can also check ip route :\n\n\n root@Yantrr:~# ip route\n default via 192.168.1.1 dev eth0\n 10.64.64.64 dev ppp0  proto kernel  scope link  src 100.106.85.110\n 192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.150\n\n\n\n\n\n\n\nNext is to get the information about the hosts, gateways etc. For this you should view the routing table\n\n\n root@Yantrr:~# route -n\n Kernel IP routing table\n Destination     Gateway        Genmask          Flags     Metric     Ref      Use        iface\n 0.0.0.0        192.168.1.1     0.0.0.0           UG        0          0       0         eth0      \n 10.64.64.64    0.0.0.0         255.255.255.255   UH        0          0       0         ppp0\n 192.168.1.0    0.0.0.0         255.255.255.0      U        0          0       0         eth0\n\n\n\n\n\n\n\nHere you can see gateway is not initialised to ppp0 protocol which has an IP 10.64.64.64 and also in ip route ,it shows \u201cdefault via 192.168.1.1 dev eth0\u201d which should be changed to \u201cdefault via 10.64.64.64 dev ppp0\u201d\n\n\n\n\n\n\nFor that you have to type following commands:\n\n\n # GW=$(ip address show ppp0 | awk '/peer/ {print $4}' | cut -d\"/\" -f1)\n\n # echo $GW\n\n # /sbin/ip route replace default via $GW dev ppp0\n\n\n\n\n\n\n\nNow if you check routing table\n\n\n      Destination     Gateway         Genmask         Flags    Metric  Ref    Use    Iface\n\n      0.0.0.0         10.64.64.64     0.0.0.0          UG       0       0        0    ppp0\n\n      10.64.64.64     0.0.0.0         255.255.255.255  UH       0       0        0     ppp0\n\n      192.168.1.0     0.0.0.0         255.255.255.0    U        0       0        0     eth0\n\n\n\n\n\n\n\nAlso the ip route command changes to\n\n\n  root@Yantrr:~# ip route\n  default via 10.64.64.64 dev ppp0\n  10.64.64.64 dev ppp0  proto kernel  scope link  src 100.106.85.110\n  192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.150\n\n\n\n\n\n\n\nNow you are ready to use the internet connection via ppp0.\n\n\n\n\n\n\nYou can check the connections by using ping command.\n\n\n\n\nAlso check the file /etc/resolv.conf\n# nano /etc/resolv.conf\n\n\n\n\n\n\n\nThe content of file should be\n\n\n    nameserver 192.168.1.150\n    nameserver 8.8.8.8\n\n\n\nNote:\n Another error that can arise while you ping any IP is that it may reach the DNS but could not transmit packets. For eg:\n\n\n    root@Yantrr:~# ping 8.8.8.8\n    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n\n    --- 8.8.8.8 ping statistics ---\n    6 packets transmitted, 0 received, 100% packet loss, time 5000ms\n\n\n\n\n\nFor this also you have to check your wvdial configurations and also the routing table.\n\n\n\n\nVIBE as an Access Point\n\n\n\n\nConnect VIBE2 to your PC client via ethernet interface.\n\n\n\n\nCheck whether eth0 (ethernet connection) is up or not using the command:\n\n\n  ifconfig\n\n  eth0      Link encap:Ethernet  HWaddr 1c:ba:8c:f1:a2:40                         \n            inet addr:192.168.1.151  Bcast:192.168.1.255  Mask:255.255.255.0      \n            inet6 addr: fe80::1eba:8cff:fef1:a240/64 Scope:Link                   \n            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                    \n            RX packets:2500 errors:0 dropped:180 overruns:0 frame:0               \n            TX packets:1049 errors:0 dropped:0 overruns:0 carrier:0               \n            collisions:0 txqueuelen:1000                                          \n            RX bytes:1494880 (1.4 MiB)  TX bytes:154334 (150.7 KiB)               \n            Interrupt:40\n\n\n\n\n\n\n\nNow we will set our VIBE as an access point (AP).\n\n\n\n\n\n\nBefore that let us understand what AP needs to be capable of to be AP:\n\n\n\n\nInform devices about AP existence (Broadcast SSID) or at least allow         clients to connect.\n\n\nAuthenticate client.\n\n\nAssign IP to the client devices.\n\n\nRoute packages to the \u201coutput\u201d network and the other way around.\n\n\n\n\n\n\n\n\nIn order to handle all these,VIBE needs the following tools\n\n\n\n\nhostapd \u2013 Host AccessPoint Daemon \n\n\nwpa-supplicant \u2013 tool responsible for WPA authorization\n\n\nisc-dhcp-server \n\n\nip-tables \n\n\n\n\n\n\n\n\nLet us now install these tools\n\n\n      sudo apt-get update\n\n      sudo apt-get -y install hostapd isc-dhcp-server iptables wpasupplicant\n\n\n\n\n\nNow let us set the AP configuration by creating the file /etc/hostapd/hostapd.conf and adding the following content\n interface=wlan0    #wlan0 will be working in AP mode\n ssid=Your_AP_SSID  #your AP SSID\n channel=1          #WiFi channel used by AP\n # WPA and WPA2 configuration\n macaddr_acl=0      #indicates that you do not use MAC address allow/deny list\n auth_algs=1        #indicates algorithm specified by IEEE 802.11\n ignore_broadcast_ssid=0 #AP will broadcast SSID\n\n #WPA settings\n wpa=2              #WPA algorithm used (WPA2 in this case)\n wpa_passphrase=my_secret_pass #AP password\n wpa_key_mgmt=WPA-PSK #WPA key mangement type\n wpa_pairwise=TKIP #encription algorithm\n rsn_pairwise=CCMP #encription algorithm\n\n #Hardware configuration\n driver=rtl871xdrv     #type of driver to be used (in may be different depending on your WiFi dongle chipset)\n                       #in majority of cases it will be driver=nl80211\n ieee80211n=1          #Whether IEEE 802.11n (HT) is enabled \n device_name=RTL8192CU #User-friendly description of device (optional)\n manufacturer=Realtek  #Manufacturer name (optional)\n hw_mode=g             #WPS RF Bands (a = 5G, b = 2.4G, g = 2.4G, ag = dual band)\n\n\n\n\n\n\n\nNote:\n If you are copying the above content ,don't forget to remove the comments from the file.\n\n\n\n\n\n\nNow we need to set up /etc/hostapd/hostapd.conf as the configuration file. We do it in /etc/default/hostapd. Put the following line there:\n\n\n DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"\n\n\n\n\n\n\n\nNow let\u2019s configure the network settings for clients connecting to AP. We do it in /etc/dhcp/dhcpd.conf\n\n\n  ddns-update-style none;   #DDNS disabled\n  default-lease-time 84600; #IP lease time valid for a day\n  max-lease-time 84600;     #IP lease time valid for a day\n  subnet 192.134.3.0 netmask 255.255.255.0 { #AP Subnet defintion\n  range 192.134.3.2 192.134.3.9  ;         #Range of IP addresses available for clients\n  option domain-name-servers 192.168.1.1 ; #your DNS IP (in my case, my router is workign as DNS)\n  option domain-name \"home\";     #optional domain name\n  option routers  192.134.3.1  ; #your client's gateway / router IP\n  }\n\n\n\n\n\n\n\nAgain we need to make sure that DHCP server uses this configuration. In /etc/default/isc-dhcp-server put the following lines:\n\n\n DHCPD_CONF=\"/etc/dhcp/dhcpd.conf\"\n INTERFACES=\"wlan0\"\n\n\n\n\n\n\n\nNow configure wlan0 for static IP adress (the same as router IP in dhcpd.conf file)\n\n\n\n\n\n\nWe do it in /etc/network/interfaces:\n\n\n auto wlan0\n allow-hotplug wlan0\n iface wlan0 inet static\n      address 192.134.3.1\n      netmask 255.255.255.0\n up iptables-restore \n /etc/iptables.ipv4.nat\n\n\n\n\n\n\n\nThe last line will set routing rules after restart.\n\n\n\n\nLet\u2019s turn on packet forwarding in /etc/sysctl.conf by making sure that line \n net.ipv4.ip_forward=1\n\n\n\n\n\n\n\nis uncommented or added.\n\n\n\n\nWe will configure routing now by executing (assuming eth0 is your WAN interface):\nsudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\nsudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n\nsudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT\n\n\n\n\n\n\n\nand lets save these setting in a file:\n\n\n    sh -c \"iptables-save \n /etc/iptables.ipv4.nat\"\n\n\n\n\n\nIf you are using RTL8188CUS chipset you had to replace original hostapd with the one prepared for this chipset. \nwget \"http://raspberry-at-home.com/files/hostapd.gz\"\nsudo gzip -d hostapd.gz\nsudo chmod 755 hostapd\nsudo cp hostapd /usr/sbin/\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo check the mode, you can use the command iwconfig\n\n\nroot@Yantrr:~# iwconfig                                                         \nwlan0     IEEE 802.11bgn  ESSID:\"VIBE2_AP\"  Nickname:\"\nWIFI@REALTEK\n\"           \n          Mode:Master  Frequency:2.412 GHz  Access Point: 00:1D:43:C0:0C:F0     \n          Sensitivity:0/0                                                       \n          Retry:off   RTS thr:off   Fragment thr:off                            \n          Encryption key:off                                                    \n          Power Management:off                                                  \n          Link Quality=71/100  Signal level=-59 dBm  Noise level=0 dBm          \n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0              \n          Tx excessive retries:0  Invalid misc:0   Missed beacon:0\n\nlo        no wireless extensions.\n\neth0      no wireless extensions.\n\n\n\n\n\n\n\nYou can also verify using ipv4 tables file which can be accessed using\n\n\nnano  /etc/iptables.ipv4.nat\n\n\n\n\n\n\n\nNow you have setup your AP and can connect devices to it.", 
            "title": "Home"
        }, 
        {
            "location": "/#ethenet-ethenet-direct-connection", 
            "text": "First configure your desktop client to any  IP address except 192.168.1.150 as this address is assigned to your connected VIBE by default. ( we are using 192.168.1.151 for our PC client)    Connect VIBE to the PC client via ethernet port.    Setup ppp0 connection. You can refer the same document under Setting PPP connections      Then you have to assign gateway IP address of your PC client as 192.168.1.150 for direct communication between client and VIBE.   For this you have to type   # nano /etc/network/interfaces    A text editor will get open and then you have to configure the settings as per your requirements.( gateway IP address must be  by default. ( we are using 192.168.1.151 for our PC client)   # wpa-ssid \"essid\"\n # wpa-psk  \"password\"\n\n case, to completely disable remove file [run_boot-scripts] from the b$\n iface usb0 inet static# Ethernet/RNDIS gadget (g_ether)\n # ... or on host side, usbnet and random hwaddr\n # Note on some boards, usb0 is automatically setup with an init script\n # in that# This file describes the network interfaces available on your system\n # and how to activate them. For more information, see interfaces(5).\n\n # The loopback network interface\n auto lo\n iface lo inet loopback\n\n # The primary network interface\n auto eth0\n # iface eth0 inet dhcp\n # Example to keep MAC address between reboots\n # hwaddress ether DE:AD:BE:EF:CA:FE\n iface eth0 inet static\n address 192.168.1.151\n netmask 255.255.255.0\n network 192.168.1.0\n gateway 192.168.1.150    Now for confirmation, ping 192.168.1.150 using your PC client as well as ping 192.168.1.151( PC client) using VIBE.   Log into VIBE via ethernet port using your PC client as root client.", 
            "title": "Ethenet-Ethenet Direct Connection"
        }, 
        {
            "location": "/#setting-ppp-connections", 
            "text": "Place a data enabled mini-SIM in the SIM card slot and connect a GSM antenna to the respective 2G/3G antenna connector.    Ensure that the power jumpers J2 and J3(ignore if battery feature present) on VIBE are in place and eeprom address set at 0x54 using dip switch S7.    Power up VIBE using the 5V,5A DC adapter(supplied with VIBE).    After powering up and bootup, ssh into VIBE through Ethernet Cable (at IP 192.168.1.150 for preflashed eMMC images)     # ssh -l root 192.168.1.150    Username for root login is root and password is root. For user login, username is debian and password is temppwd.    Then you have to check modem using lsusb command.    Note:  Please ensure that the user leds on the board is glowing according to its functionality after booting/powering the board.          root@Yantrr:~# lsusb\n\n        Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp.\n        Bus 002 Device 002: ID 21f5:2012\n        Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n        Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub   Now there are two ways to setup ppp0 connections.   a) ppp daemon    For setting it , you have to open /etc/ppp/peers/airtel file ( we used airtel SIM).       # nano /etc/ppp/peers/airtel    From the opened window, you can verify the username for your service provider.    # This option file was generated by pppconfig 2.3.18.\n  #\n  #\n  hide-password\n  noauth\n  connect \"/usr/sbin/chat -v -f /etc/chatscripts/airtel\"\n  debug\n  /dev/ttyUSB3\n  460800\n  #defaultroute\n  replacedefaultroute\n  noipdefault\n  user \"airtel\"\n  remotename airtel    Now you can use pon command.    #  pon airtel    You can check whether ppp0 connection is up or not.    root@Yantrr:~# ifconfig        eth0      Link encap:Ethernet  HWaddr 6c:ec:eb:64:98:ce\n                inet addr:192.168.1.150  Bcast:192.168.1.255  Mask:255.255.255.0\n                inet6 addr: fe80::6eec:ebff:fe64:98ce/64 Scope:Link\n                UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n                RX packets:20930 errors:0 dropped:2409 overruns:0 frame:0\n                TX packets:4791 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:1000\n                RX bytes:4089157 (3.8 MiB)  TX bytes:533725 (521.2 KiB)\n                Interrupt:40\n\n      lo        Link encap:Local Loopback\n                inet addr:127.0.0.1  Mask:255.0.0.0\n                inet6 addr: ::1/128 Scope:Host\n                UP LOOPBACK RUNNING  MTU:65536  Metric:1\n                RX packets:160 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:160 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:0\n                RX bytes:14652 (14.3 KiB)  TX bytes:14652 (14.3 KiB)\n\n      ppp0      Link encap:Point-to-Point Protocol\n                inet addr:100.105.62.223  P-t-P:10.64.64.64  Mask:255.255.255.255\n                UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1\n                RX packets:7 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:17 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:3\n                RX bytes:130 (130.0 B)  TX bytes:937 (937.0 B)  b) Wvdial   First we will setup ppp0 connections using wvdial.   For this you have to install wvdial tool using command    # sudo apt -get install wvdial    Now we have to set the configuration of wvdial using wvdial.conf file. For this type    # nano /etc/wvdial.conf    Assuming that you have the USERNAME, PASSWORD and APN available for the service provider of the SIM card being used, edit and make wvdial.conf file like this. Sample Wvdial files for some service providers are given  HERE    NOTE:  Also verify the modem port mentioned in the wvdial.conf file with actual modem port.  For ZTE model- /dev/ttyUSB3  For SEW Strong Rising model- /dev/ttyUSB0       [Dialer Defaults]\n     Modem Type = Analog\n     ModemPhone = *99#\n     ISDN = 0\n     Baud = 115200\n     Username = USERNAME\n     Password = PASSWORD\n     Modem = /dev/ttyUSB0\n     Init1 = ATZ\n     Init2 = ATQ0 V1 E1 S0=0  C1  D2 +FCLASS=0\n     Init3 = at+cgdcont=1,\"ip\",\"APN\"\n     Stupid Mode = 1  Note:  Consult your network provider for exact details in case you are facing any difficulties.  Now save and exit the wvdial.conf file.  Next we have to establish wvdial connection. (In this example we have taken airtel-3G micro-SIM card)        wvdial Airtel_3G  NOTE:  Here you may get some errors like      warning, can't find address for `www.suse.de`\n\n   --  warning, address lookup does not work\n   --  Nameserver (DNS) failure, the connection may not work.    For this you have to edit your wvdial.conf file correctly by verifying the details with the service provider of your SIM card. You $    In the following file /etc/ppp/peers/wvdial, comment or remove usepeerdns     # nano /etc/ppp/peers/wvdial\n\n   noauth\n   name wvdial\n   #usepeerdns    And in /etc/wvdial.conf ,  add following two lines in the column of your internet service provider:        # nano /etc/wvdial.conf\n\n      check DNS = no\n      auto DNS = no   Now we will check whether connection is established or not.   root@Yantrr:~# ifconfig        eth0      Link encap:Ethernet  HWaddr 6c:ec:eb:64:98:ce\n                inet addr:192.168.1.150  Bcast:192.168.1.255  Mask:255.255.255.0\n                inet6 addr: fe80::6eec:ebff:fe64:98ce/64 Scope:Link\n                UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n                RX packets:20930 errors:0 dropped:2409 overruns:0 frame:0\n                TX packets:4791 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:1000\n                RX bytes:4089157 (3.8 MiB)  TX bytes:533725 (521.2 KiB)\n                Interrupt:40\n\n      lo        Link encap:Local Loopback\n                inet addr:127.0.0.1  Mask:255.0.0.0\n                inet6 addr: ::1/128 Scope:Host\n                UP LOOPBACK RUNNING  MTU:65536  Metric:1\n                RX packets:160 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:160 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:0\n                RX bytes:14652 (14.3 KiB)  TX bytes:14652 (14.3 KiB)\n\n      ppp0      Link encap:Point-to-Point Protocol\n                inet addr:100.105.62.223  P-t-P:10.64.64.64  Mask:255.255.255.255\n                UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1\n                RX packets:7 errors:0 dropped:0 overruns:0 frame:0\n                TX packets:17 errors:0 dropped:0 overruns:0 carrier:0\n                collisions:0 txqueuelen:3\n                RX bytes:130 (130.0 B)  TX bytes:937 (937.0 B)   Here we can see three protocols   1) Ethernet (eth0)\n2) Loopback (lo)\n3) Point-to-Point protocol (ppp0)    You can also check ip route :   root@Yantrr:~# ip route\n default via 192.168.1.1 dev eth0\n 10.64.64.64 dev ppp0  proto kernel  scope link  src 100.106.85.110\n 192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.150    Next is to get the information about the hosts, gateways etc. For this you should view the routing table   root@Yantrr:~# route -n\n Kernel IP routing table\n Destination     Gateway        Genmask          Flags     Metric     Ref      Use        iface\n 0.0.0.0        192.168.1.1     0.0.0.0           UG        0          0       0         eth0      \n 10.64.64.64    0.0.0.0         255.255.255.255   UH        0          0       0         ppp0\n 192.168.1.0    0.0.0.0         255.255.255.0      U        0          0       0         eth0    Here you can see gateway is not initialised to ppp0 protocol which has an IP 10.64.64.64 and also in ip route ,it shows \u201cdefault via 192.168.1.1 dev eth0\u201d which should be changed to \u201cdefault via 10.64.64.64 dev ppp0\u201d    For that you have to type following commands:   # GW=$(ip address show ppp0 | awk '/peer/ {print $4}' | cut -d\"/\" -f1)\n\n # echo $GW\n\n # /sbin/ip route replace default via $GW dev ppp0    Now if you check routing table        Destination     Gateway         Genmask         Flags    Metric  Ref    Use    Iface\n\n      0.0.0.0         10.64.64.64     0.0.0.0          UG       0       0        0    ppp0\n\n      10.64.64.64     0.0.0.0         255.255.255.255  UH       0       0        0     ppp0\n\n      192.168.1.0     0.0.0.0         255.255.255.0    U        0       0        0     eth0    Also the ip route command changes to    root@Yantrr:~# ip route\n  default via 10.64.64.64 dev ppp0\n  10.64.64.64 dev ppp0  proto kernel  scope link  src 100.106.85.110\n  192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.150    Now you are ready to use the internet connection via ppp0.    You can check the connections by using ping command.   Also check the file /etc/resolv.conf # nano /etc/resolv.conf    The content of file should be      nameserver 192.168.1.150\n    nameserver 8.8.8.8  Note:  Another error that can arise while you ping any IP is that it may reach the DNS but could not transmit packets. For eg:      root@Yantrr:~# ping 8.8.8.8\n    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n\n    --- 8.8.8.8 ping statistics ---\n    6 packets transmitted, 0 received, 100% packet loss, time 5000ms   For this also you have to check your wvdial configurations and also the routing table.", 
            "title": "Setting PPP connections"
        }, 
        {
            "location": "/#vibe-as-an-access-point", 
            "text": "Connect VIBE2 to your PC client via ethernet interface.   Check whether eth0 (ethernet connection) is up or not using the command:    ifconfig\n\n  eth0      Link encap:Ethernet  HWaddr 1c:ba:8c:f1:a2:40                         \n            inet addr:192.168.1.151  Bcast:192.168.1.255  Mask:255.255.255.0      \n            inet6 addr: fe80::1eba:8cff:fef1:a240/64 Scope:Link                   \n            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                    \n            RX packets:2500 errors:0 dropped:180 overruns:0 frame:0               \n            TX packets:1049 errors:0 dropped:0 overruns:0 carrier:0               \n            collisions:0 txqueuelen:1000                                          \n            RX bytes:1494880 (1.4 MiB)  TX bytes:154334 (150.7 KiB)               \n            Interrupt:40    Now we will set our VIBE as an access point (AP).    Before that let us understand what AP needs to be capable of to be AP:   Inform devices about AP existence (Broadcast SSID) or at least allow         clients to connect.  Authenticate client.  Assign IP to the client devices.  Route packages to the \u201coutput\u201d network and the other way around.     In order to handle all these,VIBE needs the following tools   hostapd \u2013 Host AccessPoint Daemon   wpa-supplicant \u2013 tool responsible for WPA authorization  isc-dhcp-server   ip-tables      Let us now install these tools        sudo apt-get update\n\n      sudo apt-get -y install hostapd isc-dhcp-server iptables wpasupplicant   Now let us set the AP configuration by creating the file /etc/hostapd/hostapd.conf and adding the following content  interface=wlan0    #wlan0 will be working in AP mode\n ssid=Your_AP_SSID  #your AP SSID\n channel=1          #WiFi channel used by AP\n # WPA and WPA2 configuration\n macaddr_acl=0      #indicates that you do not use MAC address allow/deny list\n auth_algs=1        #indicates algorithm specified by IEEE 802.11\n ignore_broadcast_ssid=0 #AP will broadcast SSID\n\n #WPA settings\n wpa=2              #WPA algorithm used (WPA2 in this case)\n wpa_passphrase=my_secret_pass #AP password\n wpa_key_mgmt=WPA-PSK #WPA key mangement type\n wpa_pairwise=TKIP #encription algorithm\n rsn_pairwise=CCMP #encription algorithm\n\n #Hardware configuration\n driver=rtl871xdrv     #type of driver to be used (in may be different depending on your WiFi dongle chipset)\n                       #in majority of cases it will be driver=nl80211\n ieee80211n=1          #Whether IEEE 802.11n (HT) is enabled \n device_name=RTL8192CU #User-friendly description of device (optional)\n manufacturer=Realtek  #Manufacturer name (optional)\n hw_mode=g             #WPS RF Bands (a = 5G, b = 2.4G, g = 2.4G, ag = dual band)    Note:  If you are copying the above content ,don't forget to remove the comments from the file.    Now we need to set up /etc/hostapd/hostapd.conf as the configuration file. We do it in /etc/default/hostapd. Put the following line there:   DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"    Now let\u2019s configure the network settings for clients connecting to AP. We do it in /etc/dhcp/dhcpd.conf    ddns-update-style none;   #DDNS disabled\n  default-lease-time 84600; #IP lease time valid for a day\n  max-lease-time 84600;     #IP lease time valid for a day\n  subnet 192.134.3.0 netmask 255.255.255.0 { #AP Subnet defintion\n  range 192.134.3.2 192.134.3.9  ;         #Range of IP addresses available for clients\n  option domain-name-servers 192.168.1.1 ; #your DNS IP (in my case, my router is workign as DNS)\n  option domain-name \"home\";     #optional domain name\n  option routers  192.134.3.1  ; #your client's gateway / router IP\n  }    Again we need to make sure that DHCP server uses this configuration. In /etc/default/isc-dhcp-server put the following lines:   DHCPD_CONF=\"/etc/dhcp/dhcpd.conf\"\n INTERFACES=\"wlan0\"    Now configure wlan0 for static IP adress (the same as router IP in dhcpd.conf file)    We do it in /etc/network/interfaces:   auto wlan0\n allow-hotplug wlan0\n iface wlan0 inet static\n      address 192.134.3.1\n      netmask 255.255.255.0\n up iptables-restore   /etc/iptables.ipv4.nat    The last line will set routing rules after restart.   Let\u2019s turn on packet forwarding in /etc/sysctl.conf by making sure that line   net.ipv4.ip_forward=1    is uncommented or added.   We will configure routing now by executing (assuming eth0 is your WAN interface): sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\nsudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n\nsudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT    and lets save these setting in a file:      sh -c \"iptables-save   /etc/iptables.ipv4.nat\"   If you are using RTL8188CUS chipset you had to replace original hostapd with the one prepared for this chipset.  wget \"http://raspberry-at-home.com/files/hostapd.gz\"\nsudo gzip -d hostapd.gz\nsudo chmod 755 hostapd\nsudo cp hostapd /usr/sbin/       To check the mode, you can use the command iwconfig  root@Yantrr:~# iwconfig                                                         \nwlan0     IEEE 802.11bgn  ESSID:\"VIBE2_AP\"  Nickname:\" WIFI@REALTEK \"           \n          Mode:Master  Frequency:2.412 GHz  Access Point: 00:1D:43:C0:0C:F0     \n          Sensitivity:0/0                                                       \n          Retry:off   RTS thr:off   Fragment thr:off                            \n          Encryption key:off                                                    \n          Power Management:off                                                  \n          Link Quality=71/100  Signal level=-59 dBm  Noise level=0 dBm          \n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0              \n          Tx excessive retries:0  Invalid misc:0   Missed beacon:0\n\nlo        no wireless extensions.\n\neth0      no wireless extensions.    You can also verify using ipv4 tables file which can be accessed using  nano  /etc/iptables.ipv4.nat    Now you have setup your AP and can connect devices to it.", 
            "title": "VIBE as an Access Point"
        }
    ]
}